0.
Доброго дня. Мене звати Марченко Владислав Володимирович, і сьогодні я спробую коротко розповісти про свою дипломну роботу, її структуру та особливості
1.
Метою роботи є дослідження можливостей використання системи Lazarus при вивченні шкільного курсу інформатики та курсу за вибором з основ візуального програмування
2.
Об'єктом дослідження стало навчання інформатики учнів основної школи, а предметом – методика навчання учнів 8 класу з теми «Алгоритми та програми» на основі середовища Lazarus.
3.
Для реалізації поставленої мети розв’язувалися наступні завдання:
  1) Проаналізувати навчальні програми з інформатики для 5-9 класів
  2) Розглянути доцільність вивчення мови програмування Lazarus
  3) Розробити практичні завдання
  4) Розробити методичні рекомендації до практичних завдань
3.1.
Проаналізувавши навчальні програми для 5-9 класів, було виявлено, що програма для учнів, що вивчали інформатику в 2-4 класах, є більш розширеною за своєю структурою, проте програма для учнів, що не вивчали інформатику в молодших класах є краще структурованою. Все це досить добре відображено в дипломній роботі та на цій таблиці.
3.2.
Нами було проаналізовано шість мов та середовищ програмування, серед них:
Scratch, Visual Basic, Pascal, C++, Python та Lazarus.
Scratch виявився досить гарним засобом для навчання дітей основам алгоритмізації у більш ігровій формі. Візуальні компоненти, або, як їх називають розробники, блоки, допомагають дитині досить швидко зорієнтуватися у самому середовищі, і, як наслідок, саме алгоритмізація займає більшу частину часу
Проте це середовище не дозволяє створювати повноцінні програми, а запуск існуючих проектів на іншому комп'ютері потребує встановлення додаткових програм
Visual Basic є досить простою в освоєнні мовою, стандартне середовище якої побудовано з використанням візуальних компонентів, що ще більше спрощує сам процес вивчення. Проте і ця мова має ряд недоліків: програми створюються лише для платформи Microsoft Windows, що є закритим, та ще й комерційним проектом, а самі скомпільвані проекти потребують встановлення додаткових бібліотек. За всю історію свого розвитку, вона дуже сильно змінювалась, що призводило до проблем стандартизації. Остання версія (6.0) була опублікована в середині 1998 року, а надалі на її основі була створена абсолютно нова мова з новим синтаксисом Visual Basic.NET, а розвиток Visual Basic на цьому припинився
Pascal - мова зі строгим, проте простим для розуміння синтаксисом. Це привчає до "хорошого стилю" або "хорошого тону" у програмуванні. Дана мова не вважається застарілою, адже на її основі створюються та розвиваються різні її модифікації. Одним з головних мінусів при вивченні даної мові в школі стає відсутність візуальних компонентів. Школяру необхідно відразу переходити до абстрагованих понять, що на практиці виходить доволі складно
C++ є строгою мовою у будь-якому з контекстів. Вона є найбільш ефективною з усіх розглянутих для написання невеликих швидкодіючих сервісів. Застосовується там, де швидкодія є критичним показником, тобто, для написання ядер операційних систем, серверів, хмарних сервісів, тощо. Для вивчення у шкільному курсі вона є найскладнішою з розлянутих мов.
Python є досить простою для засвоєння та розуміння мовою. Вона - один із найпотенційніших кандидатів на вивчення у школі, проте і тут є кілька зауважень: вона не є С-подібною мовою програмування. Тобто, якщо дитина захоче розвиватися в цьому напрямку надалі - найімовірніше, вона матиме необхідність переучуватись під абсолютно інший синтаксис та стандарти. Також, більшість середовищ для цієї мови мають недостатню кількість, або взагалі не мають візуальних компонентів, що досить сильно ускладнює сам навчальний процес
Останньою мовою програмування із списку розглянутих є Lazarus. Це надмножина мови Pascal, тобто доповнює її. З цього, як наслідок, випливає строгий, але простий синтаксис. До цього, дане середовище є відкритим (кожен може подивитись вихідний код та запропонувати свої виправлення), безкоштовним та крос-платформним. Існує навіть можливість компіляції проектів для іншої платформи. Окрім цього, середовище має візуальні компоненти, та взагалі створено за принципом What You See Is What You Get. Тобто, іншими словами, учень ще на етапі розробки програми може бачити кінцевий результат. Також, мова є об'єктно-орієнтованою, що, на сьогоднішній день, є добрим показником, а саме середовище та його документація перекладені майже всіма основними мовами світу, зокрема українською.
Думаю, після такого порівняння, не повинно виникнути питань типу "А чому ти вибрав саме цю мову".
3.3

